<?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <mapper namespace="com.byeon.boot3.member.MemberMapper">
    	
    	<!-- memberFiles -->
    	<insert id="setFileAdd" parameterType="MemberFilesVO">
    		INSERT INTO MEMBERFILES(FILENUM, ID, FILENAME, ORINAME)
    		VALUES(NULL, #{id}, #{fileName}, #{oriName})
    	</insert>
    
    	<select id="getFileDetail" parameterType="MemberVO" resultType="MemberFilesVO">
    		SELECT * FROM MEMBERFILES WHERE ID=#{id}
    	</select>
    
    
    
    	<!-- member -->
    	<insert id="setJoin" parameterType="MemberVO">
    		INSERT INTO MEMBER(ID, PW, NAME, EMAIL, PHONE)
    		VALUES(#{id}, #{pw}, #{name}, #{email}, #{phone})
    	</insert>
    	
    	<!-- 내꺼 시작-->
    	<!-- <select id="getLogin" parameterType="MemberVO" resultMap="loginResult">
    		SELECT M.ID, M.NAME, R.ROLENAME
    		FROM MEMBER M
    			INNER JOIN
    			(SELECT * 
				FROM
					ROLE R
						INNER JOIN
					MEMBERROLE MR
				USING(ROLEID)) R
				USING(ID)
    		WHERE ID = #{id} AND PW = #{pw}
    	</select>
    	
    	<resultMap type="MemberVO" id="loginResult">
    		<id column="id" property="id"/>
    		<result column="name" property="name"/>
    		<collection property="roleVOs" javaType="java.util.List" ofType="RoleVO">
				<id column="roleId" property="roleId"/>
				<result column="roleName" property="roleName"/>
			</collection>
    	</resultMap> -->
    	<!-- 내꺼 끝 -->
    	
    	<!-- 강사꺼 시작-->
    	<select id="getLogin" parameterType="MemberVO" resultMap="loginResult">
	    	SELECT ID, M.NAME, R.ROLENAME
			FROM 
				MEMBER M
				INNER JOIN
				MEMBERROLE MR
				USING(ID)
				INNER JOIN
				ROLE R
				USING(ROLEID)
			WHERE ID=#{id} and M.PW=#{pw}
		</select>
		
    	<resultMap type="MemberVO" id="loginResult">
    		<id column="ID" property="id"/>
    		<result column="NAME" property="name"/>
    		<collection property="roleVOs" javaType="List" ofType="RoleVO">
				<result column="ROLENAME" property="roleName"/>
			</collection>
    	</resultMap>
    	<!-- 강사꺼 끝 -->
 
    	<select id="myPage" parameterType="MemberVO" resultMap="myPageResult">
    		SELECT M.ID, M.NAME, M.EMAIL, M.PHONE, F.* 
    		FROM MEMBER M
    			LEFT JOIN
    			MEMBERFILES F
    			USING(ID)
    		WHERE ID = #{id}
    	</select>
    	
    	<resultMap type="MemberVO" id="myPageResult">
    		<id column="id" property="id"/>
    		<result column="pw" property="pw"/>
    		<result column="name" property="name"/>
    		<result column="email" property="email"/>
    		<result column="phone" property="phone"/>
    		<!-- 밑에 property 변수명이라서 MemberVO에 설정한 변수명이고 javaType은 config에 등록해준 type명임 대,소문자 주의! -->
    		<association property="memberFilesVO" javaType="MemberFilesVO" >
    			<id column="fileNum" property="fileNum"/>
    			<result column="fileName" property="fileName"/>
    			<result column="oriName" property="oriName"/>
    		</association>
    	</resultMap>
    	
    	<update id="setUpdate" parameterType="MemberVO">
    		UPDATE MEMBER SET NAME = #{name}, EMAIL = #{email}, PHONE = #{phone}
    		WHERE ID = #{id}
    	</update>
    	
    	<delete id="setDelete" parameterType="MemberVO">
    		DELETE FROM MEMBER WHERE ID = #{id}
    	</delete>
    	
		
		<!-- memberRole -->
		<insert id="setRoleAdd" parameterType="Map">
			INSERT INTO MEMBERROLE(ID, ROLEID)
			VALUES(#{id}, (SELECT ROLEID FROM ROLE WHERE ROLENAME = #{roleName}))
			<!-- MEMBERROLE(ID, ROLEID) 여기서 ROLEID는 문자열로 받아오기 때문에 숫자를 받기위해 서브쿼리를 하나 더 써줌! -->
		</insert>


		<!-- find id -->
		<select id="getFindId" parameterType="MemberVO" resultType="MemberVO">
			SELECT ID FROM MEMBER WHERE EMAIL = #{email}
			<!-- REPLACE 함수써서 ID 오롯히 가지고 오지말고 ad*** 등으로 갖고오게 만들어주기 -->
			<!-- 비밀번호 찾기 할때 자바에서 메일전송, 임시비밀번호 발급, 비밀번호 이메일로 보내주기 등 해보기 -->
		</select>
    
    
    </mapper>